#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
#####################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#####################################################################
#name：赵伟城
#ID：2100013165
#####################################################################
# Describe how and why you modified the baseline code.
#
#1. 删除第一个xor指令,因为寄存器的值初始默认为0
#
#2. 调整src++和dst++的位置，减少上下文的数据项依赖
#
#3. 在hcl文件实现iaddq
#
#4. 使用9x9循环展开，余数采用二分查找
#
#5. 解决加载/使用冒险，具体有两个方面：
#	  一是在循环展开里，一次性读入9个值，再一次性写入至9个位置
#	  二是在二分查找对应的跳转表里，每次读入数据之后，利用上次的条件码判
#		定rax是否加1，即上一次读入数字是否为正。
#		两个特殊情况说明，余数1和8对应的情况无法使用上述策略进行优化。
#		正确性说明:  上述策略在余数非8的时候，进入跳转点读入数字后立马判定跳转
#					理由在于，在使用二分查找时所有跳转使用的都是je和jl，这
#					保证了非8情况时第一次jle判定必定为真(即不会加1)。
#
#6. 在二分查找时对跳转策略的考虑
#	由于y86流水线跳转默认为使用跳转，因此在几次分叉口处，优先选择情况多的方向。
#
#7. 在二分查找时对测试数据的考虑
#	由于程序计算CPE时是采用平均数，那么对数组长度为1、2、3等几个小数的情况需要
#	尽快处理。因此，这点违背了策略6，先向1、2、3跳转，在1、2、3中又先向1跳转。
#
#####################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;   ########采用寄存器默认0值
	#andq %rdx,%rdx		# len <= 0?
	#jle Done		# if so, goto Done:

	iaddq $-9,%rdx
	jl judge4
while9:	
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq $8(%rdi), %r11
	mrmovq $16(%rdi), %r12
	mrmovq $24(%rdi), %r13
	mrmovq $32(%rdi), %r14
	mrmovq $40(%rdi), %rbx
	mrmovq $48(%rdi), %rbp
	mrmovq $56(%rdi), %r9
	mrmovq $64(%rdi), %r8
	iaddq $72, %rdi		  #######改变顺序，减少数据项依赖
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, $8(%rsi)
	rmmovq %r12, $16(%rsi)
	rmmovq %r13, $24(%rsi)
	rmmovq %r14, $32(%rsi)
	rmmovq %rbx, $40(%rsi)
	rmmovq %rbp, $48(%rsi)
	rmmovq %r9, $56(%rsi)
	rmmovq %r8, $64(%rsi)
	iaddq $72, %rsi
tmp80:		
	andq %r10, %r10		# val <= 0?
	jle tmp81		# if so, goto Npos:
	iaddq $1, %rax		# count++
tmp81:
	andq %r11,%r11
	jle tmp82
	iaddq $1,%rax
tmp82:
	andq %r12,%r12
	jle tmp83
	iaddq $1,%rax
tmp83:
	andq %r13,%r13
	jle tmp84
	iaddq $1,%rax
tmp84:
	andq %r14,%r14
	jle tmp85
	iaddq $1,%rax
tmp85:
	andq %rbx,%rbx
	jle tmp86
	iaddq $1,%rax
tmp86:
	andq %rbp,%rbp
	jle tmp87
	iaddq $1,%rax
tmp87:
	andq %r9,%r9
	jle tmp88
	iaddq $1,%rax
tmp88:
	andq %r8,%r8
	jle tmp89
	iaddq $1,%rax
tmp89:
	iaddq $-9, %rdx		# len-=9
#test8:
	#rrmovq %rdx,%r10
	#iaddq $-8,%r10
	jge while9	# if so, goto Loop:

	
########################二叉搜索树
	
judge4:
	iaddq $5,%rdx #+9-4
	jl judge1
	jg judge6
	je tmp4

judge6:
	iaddq $-2,%rdx
	jg judge8
	jl tmp5
	#iaddq $-1,%rdx
	je tmp6

judge8:
	iaddq $-2,%rdx
	jl tmp7
	je tmp8

judge1:
	iaddq $3,%rdx #############细节，先跳1，长度较小的数组对结果影响很大
	je tmp1
	jg judge3
	ret

judge3:
	iaddq $-2,%rdx
	jl tmp2
	je tmp3

#######################跳转表
tmp8:
	mrmovq $56(%rdi),%r8
	rmmovq %r8,$56(%rsi)
	andq %r8,%r8
	jle tmp7
	iaddq $1,%rax


tmp7:
	mrmovq $48(%rdi),%r10
tmp77:
	rmmovq %r10,$48(%rsi)
	andq %r10,%r10
	jle tmp6
	iaddq $1,%rax

tmp6:
	mrmovq $40(%rdi),%r11
tmp66:
	rmmovq %r11,$40(%rsi)
	andq %r11,%r11
	jle tmp5
	iaddq $1,%rax
	
tmp5:
	mrmovq $32(%rdi),%r12
tmp55:
	rmmovq %r12,$32(%rsi)
	andq %r12,%r12
	jle tmp4
	iaddq $1,%rax
	

tmp4:
	mrmovq $24(%rdi),%r13
tmp44:
	rmmovq %r13,$24(%rsi)
	andq %r13,%r13
	jle tmp3
	iaddq $1,%rax


tmp3:
	mrmovq $16(%rdi),%r14
tmp33:
	rmmovq %r14,$16(%rsi)
	andq %r14,%r14
	jle tmp2
	iaddq $1,%rax
	

tmp2:
	mrmovq $8(%rdi),%rbx
tmp22:
	rmmovq %rbx,$8(%rsi)
	andq %rbx,%rbx
	jle tmp1
	iaddq $1,%rax
	

tmp1:
	mrmovq (%rdi),%rbp
tmp11:
	rmmovq %rbp,(%rsi)
	andq %rbp,%rbp
	jle Done
	iaddq $1,%rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */


EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
