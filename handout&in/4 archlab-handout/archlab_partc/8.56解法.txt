#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
##################################################################
#name：赵伟城
#ID：2100013165
##################################################################
# Describe how and why you modified the baseline code.
#
#1.删除第一个xor指令,因为寄存器的值初始默认为0
#2.调整src++和dst++的位置，减少上下文的数据项依赖
#3.实现iaddq
#4.使用8x8循环展开
#经测试：8x8:8.66 7x7:8.67  6x6:8.70  5x5:8.79
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;   ########采用寄存器默认0值
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:



	rrmovq %rdx,%r10
	iaddq $-8,%r10
	jle while1
while8:	
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq $8(%rdi), %r11
	mrmovq $16(%rdi), %r12
	mrmovq $24(%rdi), %r13
	mrmovq $32(%rdi), %r14
	mrmovq $40(%rdi), %rbx
	mrmovq $48(%rdi), %rbp
	mrmovq $56(%rdi), %r9
	iaddq $64, %rdi		  #######改变顺序，减少数据项依赖
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, $8(%rsi)
	rmmovq %r12, $16(%rsi)
	rmmovq %r13, $24(%rsi)
	rmmovq %r14, $32(%rsi)
	rmmovq %rbx, $40(%rsi)
	rmmovq %rbp, $48(%rsi)
	rmmovq %r9, $56(%rsi)
	iaddq $64, %rsi		
	andq %r10, %r10		# val <= 0?
	jle tmp81		# if so, goto Npos:
	iaddq $1, %rax		# count++
tmp81:
	andq %r11,%r11
	jle tmp82
	iaddq $1,%rax
tmp82:
	andq %r12,%r12
	jle tmp83
	iaddq $1,%rax
tmp83:
	andq %r13,%r13
	jle tmp84
	iaddq $1,%rax
tmp84:
	andq %r14,%r14
	jle tmp85
	iaddq $1,%rax
tmp85:
	andq %rbx,%rbx
	jle tmp86
	iaddq $1,%rax
tmp86:
	andq %rbp,%rbp
	jle tmp87
	iaddq $1,%rax
tmp87:
	andq %r9,%r9
	jle tmp88
	iaddq $1,%rax
tmp88:
	iaddq $-8, %rdx		# len-=8
#test8:
	rrmovq %rdx,%r10
	iaddq $-8,%r10
	jg while8		# if so, goto Loop:





	
while1:	
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $8, %rdi		# src++  #######改变顺序，减少数据项依赖
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $8, %rsi		# dst++

	andq %r10, %r10		# val <= 0?
	jle tmp11		# if so, goto Npos:
	#irmovq $1, %r10
	iaddq $1, %rax		# count++
tmp11:
	iaddq $-1, %rdx		# len--
#test1:	
	#rrmovq %rdx,%r10
	#iaddq $-1,%r10
	jg while1



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
