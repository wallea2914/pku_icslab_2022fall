#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
##################################################################
#name：赵伟城
#ID：2100013165
##################################################################
# Describe how and why you modified the baseline code.
#
#1. 删除第一个xor指令,因为寄存器的值初始默认为0
#2. 调整src++和dst++的位置，减少上下文的数据项依赖
#3. 实现iaddq
#4. 使用8x8循环展开，之后采用一步步试的策略，即每走一步len--，并判断非0否
#5. 解决加载/使用冒险，具体有两个方面
#	  一是在循环展开里，一次性读入8个值，再一次性写入8个位置
#	  二是在一步步试的策略里，每一步读入下一步需要写入的值
#经测试：8x8:8.66 7x7:8.67  6x6:8.70  5x5:8.79
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;   ########采用寄存器默认0值
	#andq %rdx,%rdx		# len <= 0?
	#jle Done		# if so, goto Done:

	iaddq $-8,%rdx
	jl judge4
while8:	
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq $8(%rdi), %r11
	mrmovq $16(%rdi), %r12
	mrmovq $24(%rdi), %r13
	mrmovq $32(%rdi), %r14
	mrmovq $40(%rdi), %rbx
	mrmovq $48(%rdi), %rbp
	mrmovq $56(%rdi), %r9
	iaddq $64, %rdi		  #######改变顺序，减少数据项依赖
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, $8(%rsi)
	rmmovq %r12, $16(%rsi)
	rmmovq %r13, $24(%rsi)
	rmmovq %r14, $32(%rsi)
	rmmovq %rbx, $40(%rsi)
	rmmovq %rbp, $48(%rsi)
	rmmovq %r9, $56(%rsi)
	iaddq $64, %rsi
tmp80:		
	andq %r10, %r10		# val <= 0?
	jle tmp81		# if so, goto Npos:
	iaddq $1, %rax		# count++
tmp81:
	andq %r11,%r11
	jle tmp82
	iaddq $1,%rax
tmp82:
	andq %r12,%r12
	jle tmp83
	iaddq $1,%rax
tmp83:
	andq %r13,%r13
	jle tmp84
	iaddq $1,%rax
tmp84:
	andq %r14,%r14
	jle tmp85
	iaddq $1,%rax
tmp85:
	andq %rbx,%rbx
	jle tmp86
	iaddq $1,%rax
tmp86:
	andq %rbp,%rbp
	jle tmp87
	iaddq $1,%rax
tmp87:
	andq %r9,%r9
	jle tmp88
	iaddq $1,%rax
tmp88:
	iaddq $-8, %rdx		# len-=8
#test8:
	#rrmovq %rdx,%r10
	#iaddq $-8,%r10
	jge while8		# if so, goto Loop:

	
########################二叉搜索树
	
judge4:
	iaddq $4,%rdx #+8-4
	jl judge2
	jg judge6
	je tmp4

judge6:
	iaddq $-2,%rdx
	jl tmp5
	#iaddq $-1,%rdx
	je tmp6
	iaddq $-1,%rdx
	je tmp7

judge2:
	iaddq $3,%rdx #############细节，先跳1，长度较小的数组对结果影响很大
	je tmp1
	iaddq $-1,%rdx
	je tmp2
	iaddq $-1,%rdx
	je tmp3
	ret

#######################跳转表
tmp7:
	mrmovq $48(%rdi),%r10
	rmmovq %r10,$48(%rsi)
	andq %r10,%r10

tmp6:
	mrmovq $40(%rdi),%r11
	jle tmp66
	iaddq $1,%rax
tmp66:
	rmmovq %r11,$40(%rsi)
	andq %r11,%r11
	

tmp5:
	mrmovq $32(%rdi),%r12
	jle tmp55
	iaddq $1,%rax
tmp55:
	rmmovq %r12,$32(%rsi)
	andq %r12,%r12
	

tmp4:
	mrmovq $24(%rdi),%r13
	jle tmp44
	iaddq $1,%rax
tmp44:
	rmmovq %r13,$24(%rsi)
	andq %r13,%r13


tmp3:
	mrmovq $16(%rdi),%r14
	jle tmp33
	iaddq $1,%rax
tmp33:
	rmmovq %r14,$16(%rsi)
	andq %r14,%r14
	

tmp2:
	mrmovq $8(%rdi),%rbx
	jle tmp22
	iaddq $1,%rax
tmp22:
	rmmovq %rbx,$8(%rsi)
	andq %rbx,%rbx
	

tmp1:
	mrmovq (%rdi),%rbp
	jle tmp11
	iaddq $1,%rax
tmp11:
	rmmovq %rbp,(%rsi)
	andq %rbp,%rbp
	jle Done
	iaddq $1,%rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */


